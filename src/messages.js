// const { uk } = require('date-fns/locale');
const format = require('date-fns/format');
const { monthes, happyBirthsdayList } = require('./helpers');

const listBirthdaysForMonth = (month, { myCamarades, others }) => {
  const lenCamarades = myCamarades.length;
  const lenOthers = others.length;
  const isSomebody = lenCamarades + lenOthers > 0;
  const isMany = lenCamarades + lenOthers > 1;

  const nobody = `–í–µ—Å—å –º—ñ—Å—è—Ü—å ( <b>${month}</b> ) –±–µ–∑ —Ç–æ—Ä—Ç–∏–∫—ñ–≤ üò≥`;
  const oneEmployer = `–£ <b>${month}</b>, —Å–≤—ñ–π –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å–≤—è—Ç–∫—É—î:\nüåüüéÇ üçª üíµ üéâ üéÅ ü•≥\n\n`;
  const manyEmployers = `–£ <b>${month}</b>, –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å–≤—è—Ç–∫—É—é—Ç—å:\nüåüüéÇ üçª üíµ üéâ üéÅ ü•≥\n\n`;
  const inOurManagement =
    lenCamarades > 0 ? `‚úÖ <b>–£ –í–∞—à–æ–º—É –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ</b> ü•≥\n\n` : '';
  const inOthers =
    lenOthers > 0 ? `‚úÖ <b>–ö–æ–ª–µ–≥–∏ –∑ —ñ–Ω—à–∏—Ö –£–ø—Ä–∞–≤–ª—ñ–Ω—å</b> ü•≥\n\n` : '';

  const head = isSomebody ? (isMany ? manyEmployers : oneEmployer) : nobody;

  const resultCamarades =
    happyBirthsdayList(myCamarades) + (lenCamarades ? '\n\n' : '');
  const resultOthers = happyBirthsdayList(others);

  return isSomebody
    ? head + inOurManagement + resultCamarades + inOthers + resultOthers
    : head;
};
const listBirthdaysForDay = (birthdays, date, when) => {
  const len = birthdays.length;
  const isSomebody = len > 0;
  const isMany = len > 1;
  const nobody = `${when} ( <b>${date}</b> ) –±–µ–∑ —Ç–æ—Ä—Ç–∏–∫—ñ–≤ üòß`;
  const oneEmployer = `${when} ( <b>${date}</b> ), —Å–≤—ñ–π –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å–≤—è—Ç–∫—É—î:\nüåüüéÇ üçª üíµ üéâ üéÅ ü•≥\n\n`;
  const manyEmployers = `${when} ( <b>${date}</b> ), –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å–≤—è—Ç–∫—É—é—Ç—å:\nüåüüéÇ üçª üíµ üéâ üéÅ ü•≥\n\n`;
  const head = isSomebody ? (isMany ? manyEmployers : oneEmployer) : nobody;
  return isSomebody ? head + happyBirthsdayList(birthdays) : head;
};
const when = dateObj => {
  const today = new Date();
  return dateObj.getDate() === today.getDate() ? '–°—å–æ–≥–æ–¥–Ω—ñ' : '–ó–∞–≤—Ç—Ä–∞';
};
module.exports = {
  testMessage: () => {
    return `Test message`;
  },

  whomAreWeAdding: () => [`<b>–ö–æ–≥–æ –¥–æ–¥–∞—î–º–æ?</b>`].join('\n'),
  choseTheMonth: () => [`<b>–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å</b>`].join('\n'),
  candidatReject: () => {
    return [`<b>–í–∞–º –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ —É –¥–æ—Å—Ç—É–ø—ñ.</b>`].join('\n');
  },
  youHaveRejectCandidat: () => {
    return [`<b>–ö–∞–Ω–¥–∏–¥–∞—Ç—É –≤—ñ–¥–º–æ–≤–ª–µ–Ω–æ</b>`].join('\n');
  },
  messageToNewUser: (first_name, username, chatId) => {
    return [
      `–î–æ–±—Ä–æ–≥–æ –¥–Ω—è`,
      `–í–∞—à—ñ –¥–∞–Ω—ñ –∑ Telegram:`,
      `<b>${first_name} ${username}</b>`,
      `<b>${chatId}</b>`,
      `–ü–µ—Ä–µ—à–ª—ñ—Ç—å —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É, —â–æ–± –≤—ñ–Ω –¥–æ–¥–∞–≤ –í–∞—Å –¥–æ –±–∞–∑–∏.`
    ].join('\n');
  },
  messageToCreator: (first_name, username, chatId) => {
    return [
      `–î–æ–±—Ä–æ–≥–æ –¥–Ω—è`,
      `–ú–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞`,
      `–£ Telegram:`,
      `<b>${first_name} ${username}</b>`,
      `<b>${chatId}</b>`
    ].join('\n');
  },
  failToAddToDb: (status, message) => {
    return [
      `–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–æ –±–∞–∑–∏`,
      `<b>${status}</b>`,
      `<i>${message}</i>`
    ].join('\n');
  },
  addedToDb: (name, message) => {
    return [`${message}`, `<b>${name}</b>`, `<i>–î–æ–¥–∞–Ω–∏–π –¥–æ –±–∞–∑–∏.</i>`].join(
      '\n'
    );
  },
  listBirthdaysFromSelectedMonth: (monthNum, { myCamarades, others }) => {
    return listBirthdaysForMonth(monthes[monthNum], {
      myCamarades,
      others
    });
  },
  listBirthdaysForThisMonth: ({ myCamarades, others }) => {
    const date = new Date();
    return listBirthdaysForMonth(monthes[date.getMonth()], {
      myCamarades,
      others
    });
  },
  listBirthdaysForNextMonth: ({ myCamarades, others }) => {
    const date = new Date();
    return listBirthdaysForMonth(monthes[date.getMonth() + 1], {
      myCamarades,
      others
    });
  },
  listBirthdaysForToday: todayBirthdays => {
    const date = format(new Date(), 'dd.MM.yyyy');
    return listBirthdaysForDay(todayBirthdays, date, when(new Date()));
  },
  listBirthdaysForTomorrow: tomorrowBirthdays => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const date = format(tomorrow, 'dd.MM.yyyy');
    return listBirthdaysForDay(tomorrowBirthdays, date, when(tomorrow));
  },
  listEmplByPartOfName: emplByPartOfName => {
    const len = emplByPartOfName.length;
    const isSomebody = len > 0;
    const nobody = `–ù–µ–º–∞—î –≤ –Ω–∞—Å —Ç–∞–∫–∏—Ö ü§∑\n\n`;
    const searchResult = `–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É üîé\n\n`;
    const head = isSomebody ? searchResult : nobody;
    return isSomebody ? head + happyBirthsdayList(emplByPartOfName) : head;
  },
  helpMessage: () => {
    return [
      `<i><b>–ö–æ—Ä–æ—Ç–µ–Ω—å–∫–æ –ø—Ä–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.</b> ü¶æ\n`,
      '‚öúÔ∏è–ù–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>/help üß≠</b> –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.',
      '‚öúÔ∏è–ù–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>/start üëª</b> –±—É–¥–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.\n',
      `1Ô∏è‚É£ –í–∞–º —â–æ–¥–Ω—è üóì –æ 09:00 üïò –±—É–¥–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì© –ø—Ä–æ —Ç–µ, –≤ –∫–æ–≥–æ —Å—å–æ–≥–æ–¥–Ω—ñ –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è;\n`,
      `2Ô∏è‚É£ <b>–ü–æ—à—É–∫</b>üîé - —É –±—É–¥—å —è–∫–∏–π –º–æ–º–µ–Ω—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –ø—Ä—ñ–∑–≤–∏—â–∞ –∞–±–æ —ñ–º'—è (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é üá∫üá¶ —Ç–∞ –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏) —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ–≥ –∑ —ó—Ö –¥–∞—Ç–∞–º–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.\n`,
      `3Ô∏è‚É£ <b>–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚å®Ô∏è:</b>`,
      `‚úÖ<b>–í –∫–æ–≥–æ —Å—å–æ–≥–æ–¥–Ω—ñ</b> - –≤–∏–¥–∞—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏—Ö –≤ –∫–æ–≥–æ —Å—å–æ–≥–æ–¥–Ω—ñ –î–ù, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç—å —â–æ —Ç–∞–∫–∏—Ö –Ω–µ–º–∞.`,
      `‚úÖ<b>–í –∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞</b>  - –≤–∏–¥–∞—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏—Ö –≤ –∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞ –î–ù, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç—å —â–æ —Ç–∞–∫–∏—Ö –Ω–µ–º–∞.`,
      `‚úÖ<b>–£ —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ</b> - –≤–∏–¥–∞—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏—Ö –≤ –∫–æ–≥–æ –î–ù —É –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞–≤—à–∏ –ø–æ –¥–Ω—è–º –º—ñ—Å—è—Ü—è, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç—å —â–æ —Ç–∞–∫–∏—Ö –Ω–µ–º–∞.`,
      `‚úÖ<b>–£ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ</b> - –≤–∏–¥–∞—Å—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏—Ö –≤ –∫–æ–≥–æ –î–ù —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞–≤—à–∏ –ø–æ –¥–Ω—è–º –º—ñ—Å—è—Ü—è, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç—å —â–æ —Ç–∞–∫–∏—Ö –Ω–µ–º–∞.`,
      `‚úÖ<b>–û–±—Ä–∞—Ç–∏ –º—ñ—Å—è—Ü—å</b> - –≤–∏–¥–∞—Å—Ç—å —Å–ø–∏—Å–æ–∫ –º—ñ—Å—è—Ü—ñ–≤, –æ–±—Ä–∞–≤—à–∏ –æ–¥–∏–Ω –∑ —è–∫–∏—Ö –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ–≥ –≤ –∫–æ–≥–æ –î–ù —É –æ–±—Ä–∞–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ</i>`
    ].join('\n');
  },
  toShortForSearch: () => {
    return [
      `üî¥ <b>–¶–µ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–æ.</b>\n`,
      `<i>–í–≤–µ–¥—ñ—Ç—å —á–∞—Å—Ç–∏–Ω—É –ø—Ä—ñ–∑–≤–∏—â–∞ –∞–±–æ —ñ–º'—è (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é üá∫üá¶ —Ç–∞ <b>–º—ñ–Ω—ñ–º—É–º 3Ô∏è‚É£ —Å–∏–º–≤–æ–ª–∏</b>)</i>`
    ].join('\n');
  }
};
